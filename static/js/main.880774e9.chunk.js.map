{"version":3,"sources":["reportWebVitals.js","apex_demo.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","timestamps","json_data","data","map","time","Date","getTime","columns_to_ignore","columns","forEach","col","findIndex","el","temp","name","i","length","temp2","x","y","values","toFixed","push","App","series","style","display","justifyContent","alignItems","className","options","chart","stacked","height","type","zoom","autoScaleYaxis","dataLabels","enabled","markers","size","legend","show","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","xaxis","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qCCFRQ,EAAaC,EAAUC,KAAKF,WAAWG,KAAI,SAACC,GAEhD,OADW,IAAIC,KAAKD,GACRE,aAGVC,EAAoB,CACtB,kCACA,mBACA,iBACA,iBACA,eACA,iBACA,mBACA,+BAEIL,EAAO,GACbM,EAAQC,SAAQ,SAACC,GAEf,IAAyD,IAArDH,EAAkBI,WAAU,SAACC,GAAD,OAAQA,IAAOF,KAAa,CAC1D,IAAIG,EAAO,GACXA,EAAKC,KAAOJ,EACZG,EAAKX,KAAO,GACZ,IAAK,IAAIa,EAAI,EAAGA,EAAIf,EAAWgB,OAAQD,IAAK,CAC1C,IAAME,EAAQ,GACdA,EAAMC,EAAIlB,EAAWe,GACrBE,EAAME,EAAIlB,EAAUC,KAAKkB,OAAOV,GAAtB,kBAAgDK,GAAGM,QAAQ,GACjEJ,EAAME,EAAI,MAAY,EAC1BN,EAAKX,KAAKoB,KAAKL,GAEjBf,EAAKoB,KAAKT,OAMd,IAqDeU,EArDH,WACV,IAiCMC,EAAStB,EAEf,OACE,qBACEuB,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAJhB,SAOE,8BACE,qBAAKC,UAAU,cAAf,SACE,cAAC,IAAD,CAAOC,QA7CC,CACdC,MAAO,CACLC,SAAS,EACTC,OAAQ,IACRC,KAAM,OACNC,KAAM,CACJC,gBAAgB,IAGpBC,WAAY,CACVC,SAAS,GAEXC,QAAS,CACPC,KAAM,EACNf,MAAO,UAETgB,OAAQ,CACNC,MAAM,GAERC,KAAM,CACJT,KAAM,WACNU,SAAU,CACRC,eAAgB,EAChBC,YAAa,GACbC,UAAW,GACXC,MAAO,CAAC,EAAG,GAAI,OAInBC,MAAO,CACLf,KAAM,aAeuBV,OAAQA,EAAQU,KAAK,OAAOgB,MAAM,gBC7ErEC,IAASC,OACP,cAAC,IAAMC,WAAP,UAIE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BhE,K","file":"static/js/main.880774e9.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import React from \"react\";\nimport Chart from \"react-apexcharts\";\nimport json_data from \"./assets/opssat_analysis.json\";\nimport columns from \"./assets/opssat_columns.json\";\n\nconst timestamps = json_data.data.timestamps.map((time) => {\n  let temp = new Date(time);\n  return temp.getTime();\n});\n\nlet columns_to_ignore = [\n  \"number_of_tx_bytes_since_reboot\",\n  \"total_tx_packets\",\n  \"total_tx_bytes\",\n  \"total_rx_bytes\",\n  \"Proton 1 MeV\",\n  \"Electron 2 MeV\",\n  \"Electron 800 KeV\",\n  \"last_valid_packet_timestamp\",\n];\nconst data = [];\ncolumns.forEach((col) => {\n  let m = false;\n  if (columns_to_ignore.findIndex((el) => el === col) === -1) {\n    let temp = {};\n    temp.name = col;\n    temp.data = [];\n    for (let i = 0; i < timestamps.length; i++) {\n      const temp2 = {};\n      temp2.x = timestamps[i];\n      temp2.y = json_data.data.values[col][\"individual_values\"][i].toFixed(2);\n      if (temp2.y > 100000) m = true;\n      temp.data.push(temp2);\n    }\n    data.push(temp);\n    // if (m) console.log(col);\n  }\n});\n// const columnNames = [\"time\", ...columns];\n\nconst App = () => {\n  const options = {\n    chart: {\n      stacked: false,\n      height: 280,\n      type: \"area\",\n      zoom: {\n        autoScaleYaxis: true,\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    markers: {\n      size: 0,\n      style: \"hollow\",\n    },\n    legend: {\n      show: false,\n    },\n    fill: {\n      type: \"gradient\",\n      gradient: {\n        shadeIntensity: 1,\n        opacityFrom: 0.7,\n        opacityTo: 0.9,\n        stops: [0, 90, 100],\n      },\n    },\n    // tooltip: false,\n    xaxis: {\n      type: \"datetime\",\n    },\n  };\n  const series = data;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div>\n        <div className=\"mixed-chart\">\n          <Chart options={options} series={series} type=\"area\" width=\"1000\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n// import TimeSeriesChart from \"./timeseries_chart\";\n// import Continents from \"./timeseries_demo\";\n// import VegaDemo from \"./vega_demo\";\nimport ApexDemo from \"./apex_demo\";\nReactDOM.render(\n  <React.StrictMode>\n    {/* <TimeSeriesChart /> */}\n    {/* <Continents /> */}\n    {/* <VegaDemo /> */}\n    <ApexDemo />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}